<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ajut="clr-namespace:AJut.UX"
                    xmlns:ap="clr-namespace:AJut.UX.AttachedProperties"
                    xmlns:local="clr-namespace:AJut.UX.Controls"
                    xmlns:conv="clr-namespace:AJut.UX.Converters">

    <Style TargetType="{x:Type local:ToggleStrip}">
        <Setter Property="SeparatorBrush" Value="#08080D"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="BackgroundPressedColorBase" Value="#2BA2D8"/>
        <Setter Property="BackgroundHover">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" >
                    <GradientStop Offset="0.00" Color="#1E8BB5" />
                    <GradientStop Offset="0.10" Color="#1EA1D0" />
                    <GradientStop Offset="0.90" Color="#2BA2D8" />
                    <GradientStop Offset="1.00" Color="#1E8BB5" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BackgroundHoverOverPressed" Value="{Binding RelativeSource={RelativeSource Self}, Path=BackgroundHover}"/>
        <Setter Property="ForegroundPressed" Value="{Binding RelativeSource={RelativeSource Self}, Path=Foreground}"/>
        <Setter Property="ForegroundHover" Value="{Binding RelativeSource={RelativeSource Self}, Path=Foreground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ToggleStrip}">
                    <Border Background="{ajut:TemplateBinding Background}"
                            BorderBrush="{ajut:TemplateBinding BorderBrush}"
                            BorderThickness="{ajut:TemplateBinding BorderThickness}"
                            CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=local:ToggleStrip}, Path=(ap:BorderXTA.CornerRadius)}"
                            HorizontalAlignment="{ajut:TemplateBinding HorizontalContentAlignment}"
                            SnapsToDevicePixels="True">
                        <ItemsControl ItemsSource="{ajut:TemplateBinding Items}">
                            <ItemsControl.Style>
                                <Style TargetType="{x:Type ItemsControl}">
                                    <Setter Property="ItemsPanel">
                                        <Setter.Value>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{ajut:TemplateBinding HorizontalContentAlignment}" Value="Stretch">
                                            <Setter Property="ItemsPanel">
                                                <Setter.Value>
                                                    <ItemsPanelTemplate>
                                                        <UniformGrid Rows="1"/>
                                                    </ItemsPanelTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ItemsControl.Style>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <ToggleButton IsChecked="{Binding Path=IsSelected, Mode=TwoWay}">
                                        <Grid>
                                            <ContentPresenter Content="{Binding Data}"
                                                              ContentTemplate="{Binding Path=ItemTemplate, RelativeSource={RelativeSource AncestorType={x:Type local:ToggleStrip}}}"
                                                              Visibility="{Binding Path=ItemTemplate, RelativeSource={RelativeSource AncestorType={x:Type local:ToggleStrip}}, Converter={conv:NullnessToVisibilityConverter}}"/>
                                            <TextBlock Text="{Binding Name}" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                       Visibility="{Binding Path=ItemTemplate, RelativeSource={RelativeSource AncestorType={x:Type local:ToggleStrip}}, Converter={conv:NullnessToVisibilityConverter WhenNull=Visible, WhenNotNull=Collapsed}}"/>
                                        </Grid>
                                        <ToggleButton.Template>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Border x:Name="RootBorder" Background="#01000000"
                                                        CornerRadius="{Binding Converter={local:ToggleStripCornerRadiusConverter ReductionPercent=0.25}}">
                                                    <Border x:Name="InnerBorder" Background="#01000000"
                                                            BorderBrush="{Binding Path=Owner.SeparatorBrush, Mode=OneWay}"
                                                            CornerRadius="{Binding Converter={local:ToggleStripCornerRadiusConverter ReductionPercent=0.3}}"
                                                            BorderThickness="{Binding Converter={local:ToggleStripBorderThicknessConverter Inside=True}}">
                                                        <ContentPresenter Content="{ajut:TemplateBinding Content}" Margin="{Binding Path=Owner.ItemPadding}" 
                                                                          HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                                    </Border>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <!-- ======[ Item Pressed ]====== -->
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Setter TargetName="RootBorder" Property="Background">
                                                            <Setter.Value>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" >
                                                                    <GradientStop Offset="0.00" Color="{Binding Path=Owner.SeparatorBrush, Converter={conv:BrushColorExtractionConverter}, Mode=OneWay, FallbackValue='#2BA2D8', TargetNullValue='#2BA2D8'}" />
                                                                    <GradientStop Offset="0.20" Color="{Binding Path=Owner.BackgroundPressedColorBase, Converter={local:ToggleStripItemPressedBackgroundColorAlphatizer}, Mode=OneWay, FallbackValue='#2BA2D8', TargetNullValue='#2BA2D8'}" />
                                                                    <GradientStop Offset="1.00" Color="{Binding Path=Owner.BackgroundPressedColorBase, Converter={local:ToggleStripItemPressedBackgroundColorAlphatizer}, Mode=OneWay, FallbackValue='#2BA2D8', TargetNullValue='#2BA2D8'}" />
                                                                </LinearGradientBrush>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter Property="TextElement.Foreground" Value="{Binding Path=Owner.ForegroundPressed}"/>
                                                    </Trigger>
                                                    <!-- ======[ Item Hover ]====== -->
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="TextElement.Foreground" Value="{Binding Path=Owner.ForegroundHover}"/>
                                                    </Trigger>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                                            <Condition Binding="{Binding Path=IsSelected}" Value="True"/>
                                                        </MultiDataTrigger.Conditions>
                                                        <MultiDataTrigger.Setters>
                                                            <Setter TargetName="InnerBorder" Property="Background" Value="{Binding Path=Owner.BackgroundHoverOverPressed}"/>
                                                        </MultiDataTrigger.Setters>
                                                    </MultiDataTrigger>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                                            <Condition Binding="{Binding Path=IsSelected}" Value="False"/>
                                                        </MultiDataTrigger.Conditions>
                                                        <MultiDataTrigger.Setters>
                                                            <Setter TargetName="InnerBorder" Property="Background" Value="{Binding Path=Owner.BackgroundHover}"/>
                                                        </MultiDataTrigger.Setters>
                                                    </MultiDataTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </ToggleButton.Template>
                                    </ToggleButton>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>